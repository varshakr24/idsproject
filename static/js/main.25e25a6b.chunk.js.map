{"version":3,"sources":["logo.svg","Home.js","Viz1.js","Author.js","Viz2.js","Genre.js","Network.js","Viz4.js","Recommendation.js","Viz3.js","Search.js","Student.js","App.js","serviceWorker.js","index.js","distribution.png","Correlation.PNG","Collaborative_filtering.gif","matrix.png"],"names":["module","exports","Home","style","position","top","bottom","right","left","overflow","padding","backgroundImage","backgroundSize","Card","Header","Body","src","Dist","width","height","url","frameBorder","id","className","display","Component","Viz1","this","initViz","vizContainer","window","tableau","Viz","ref","div","Author","justifyContent","alignItems","Viz2","Genre","Network","Viz4","Recommendation","Collaborative_filtering","float","Mat","margin","marginRight","Correlation","marginLeft","Viz3","Search","Student","App","props","selecttab","val","state","selected","setState","variant","ButtonToolbar","ToggleButtonGroup","type","name","defaultValue","onChange","ToggleButton","value","React","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25e25a6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nimport React, { Component } from 'react';   \r\n import Card from 'react-bootstrap/Card';\r\nimport Iframe from 'react-iframe'\r\nimport Dist from './distribution.png';\r\nclass Home extends Component {  \r\n  componentDidMount() {  \r\n     \r\n  }  \r\n  \r\n   \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div style={{position:'absolute',top:50,bottom:0,right:0,left:0, overflow:'auto', padding:30,\r\n  \t\t\tbackgroundImage:`url('https://ae01.alicdn.com/kf/HTB1hLHiQXXXXXXyapXXq6xXFXXXu/custom-3d-wallpaper-Space-Wallpaper-Bookshelf-Background-Wall-living-3d-wallpaper-custom-3d-photo-wallpaper.jpg')`,\r\n        backgroundSize: 'cover'}}>  \r\n      <Card>\r\n      <Card.Header><h6>Introduction</h6></Card.Header>\r\n      <Card.Body>\r\n      Goodreads is a social cataloging website where users can sign up and register books to generate library catalogs and reading lists. \r\n      This project investigates GoodReads data for books from various authors over a range of genre. \r\n      Analysis regarding the influence of author, genre and ratings for different users is performed using interative visualizations.\r\n      <br /> <br/>\r\n\tIn part 1, preprocessing steps such as analysis of data distributions, filtering, outlier detection and removal, \r\n\toverview of features, top trends and search through subset of data was presented. \r\n\tFirst round of questions regarding the structure and features of data, \r\n\ttrends with respect to provided features were answered with the help of various plots.\r\n\tDetails of part 1 is briefly presented here.\r\n\t<br/> <br />\r\n\tThis is extended to create a holistic website capable of visualizing user similarity, \r\n\treview patterns, recommendations and searching through all properties of titles and authors.\r\n\r\n\r\n      </Card.Body>\r\n      </Card>\r\n      <br /> <br />\r\n      <Card>\r\n      <Card.Header><h6>Dataset Source</h6></Card.Header>\r\n      <Card.Body>\r\n\r\n      For initial analysis in phase 1, the dataset was taken from the following link:<br/>\r\nhttps://www.kaggle.com/jealousleopard/goodreadsbooks/download <br/><br/>\r\nFurther, individual datasets for user data, tags/shelf and goodread_ids is taken from Goodbooks-10k:<br/> https://github.com/zygmuntz/goodbooks-10k \r\n      </Card.Body>\r\n\r\n      </Card>\r\n      <br /> <br/>\r\n       <Card>\r\n      <Card.Header><h6>Dataset Cleaning and Processing</h6></Card.Header>\r\n      <Card.Body>\r\n\r\n\r\n     <b>Outlier detection</b><br/>\r\n     \r\nLet us look at the distribution of average_rating and ratings_count\r\nAs seen in the histogram below, the distribution is normal in the range 3 - 5, but there exists ratings of less than 1 which needs to be removed considering it as a default and irrelevant value.\r\n<br/>\r\nIn case of ratings_count, the distribution is highly skewed. This clearly indicates the presence of outliers(very high values or low values). The case here might be having no ratings i.e. ratings_count = 0\r\n<br/>\r\nThe third graph represnts a filtered ratings_count graph after removing of outliers. Now, the distribution is normal.\r\n<div ><img src={Dist} style={{width:\"100%\", height:300}}></img></div> <br/> <br/>\r\n      <b>What data columns need to be chosen?</b><br/>\r\n      The dataset is such that there are redundant columns. But these serve different purposes.\r\n      For example: ID\r\n      There is 'id', 'book_id', 'goodread_ids', 'work_id' etc all used for identifying books.\r\n      <br/>\r\n      'id' here is a non-null field for representing book records\r\n      <br/>\r\n      'book_id' is used for combining multiple filters\r\n      <br/>\r\n      'goodread_ids' are used for linking external sources\r\n      <br/>\r\n      Hence, in each vizualization columns are used in accordance to their relevance, dependency and utility.\r\n      <br/>\r\n      <br/>\r\n      <b>How are invalid values handled?</b>\r\n      <br/>\r\n      Invalid values may be null values or restricted values. \r\n      <br/>For records having invalid values to fields such as 'book_id' \r\n      or 'title' which needs to compulsorily exist are filtered while loading into the vizualization in 'tableau'\r\n      <br/>\r\n      There may be null values for goodread_ids or language_code or original title: Such records are retained.\r\n      <br/>\r\n      For publication year, the allowed 'years' are restricted in the visualizations.\r\n      <br/>\r\n      The dataset is highly normalized in the sense that each file has minimum number of columns and\r\n      different files are joined with corresponsing user_id or book_ids.\r\n      During joins, the 'left-outer' or 'right-outer' are selected based on the existance of ids and application.\r\n      <br/>\r\n      A few attributes such as average_rating needs to be computed using rating field and count.\r\n      <br/>\r\n      <br/>\r\n      <b>What subset of data needs to be chosen?</b>\r\n      <br/>\r\nShown below is the log plot of value counts i.e. number of books available in each language in the dataset. As seen, the records available are mostlty english : 'eng' and 'engUS'. \r\nAll other records are filtered out for further analysis.\r\n<br/>\r\nIn the visualizations initial filters are chosen to have only these records.\r\nIt can be changed by selecting the corresponding filters.\r\n<br/>\r\n<Iframe url=\"//plot.ly/~varshakr24/20.embed\"\r\n        width=\"100%\"\r\n        height=\"400px\" frameBorder=\"2\"\r\n        id=\"myId\" overflow =\"hidden\"\r\n        className=\"myClassname\"\r\n        display=\"initial\"\r\n        position=\"relative\"/>\r\n      </Card.Body>\r\n\r\n      </Card>\r\n      <br /><br/>\r\n      <Card>\r\n      <Card.Header><h6>4 Cs of Data</h6></Card.Header>\r\n      <Card.Body>\r\n      <b>Completeness</b> <br/>\r\n\t\tAfter the DataCleaning phase, the data is complete in the sense that, data is available for all 10,000 books\r\n\t\twith required attributes such as 'book_id', 'title' and computed attributes such as average rating.\r\n\t\t<br/><br/>\r\n\t\t<b>Coherence</b><br/>\r\nThere’s no mismatch on the datatype of any components in our data set with all invalid values like 'negative' or 'null'\r\nremoved in data cleaning. \r\n<br/><br/>\r\n<b>Correctness</b><br/>\r\nThe data is fetched using good-reads api and normalized into multiple files with no external modifications \r\nfor static values.\r\nThe correctness can also be verified by going to the corresponding good-reads links.\r\nThe computed values are seen to be closely matching the actual values from good-reads.\r\n<br/><br/>\r\n<b>Accountable</b><br />\r\nThe dataset is accessible to the public. The books data is not restricted.\r\n<br/> The user information is not available due to privacy concerns. \r\nFor occurance of any user related feature a unique user_id is used, including in the vizualizations,\r\nonly user_id can be seen and not 'name' or other information.  </Card.Body>\r\n      </Card>\r\n      <br /> <br/>\r\n     \r\n      \r\n      <Card>\r\n      <Card.Header><h6>Exploratory Analysis</h6></Card.Header>\r\n      <Card.Body>\r\n      <b> Book Statistics </b><br/>\r\n     <b>What are the top rated books?</b>\r\n<br/>\r\nThe plots below show top rated books:<br/>\r\nPlot 1 shows top 10 high rated books in terms of average rating<br/>\r\nPlot 2 shows top books in terms of highest ratings count and <br/>\r\nPlot 3 shows top 10 book with highest number of text reviews <br/><br/>\r\n<Iframe url=\"//plot.ly/~varshakr24/15.embed\"\r\n        width=\"100%\"\r\n        height=\"400px\" frameBorder=\"2\"\r\n        id=\"myId\" overflow =\"hidden\"\r\n        className=\"myClassname\"\r\n        display=\"initial\"\r\n        position=\"relative\"/>\r\n<br/>\r\n<br/>\r\n<b>Author Statistics</b><br/>\r\n<b>What are the properties of top rated authors in the current dataset?</b>\r\n<br/>\r\nThe plots below show top authors in terms of various features.<br/>\r\nPlot 1 shows authors with highest rating that is averaged out over all their books <br/>\r\nPlot 2 shows authors with highest number of ratings count averaged over all their books <br />\r\nPlot 3 shows authors with highest number of text reviews count <br />\r\nPlot 4 shows authors with highest number of books <br />\r\nPlot 5 shows authors with highest average number of pages in all their books <br />\r\n<br/>\r\n<Iframe url=\"//plot.ly/~varshakr24/4.embed\"\r\n        width=\"100%\"\r\n        height=\"820px\" frameBorder=\"2\"\r\n        id=\"myId\" overflow =\"hidden\"\r\n        className=\"myClassname\"\r\n        display=\"initial\"\r\n        position=\"relative\"/>\r\n      \r\n<br/>\r\n<br/>\r\n<b>Author Work Statistics</b>\r\n<br/><b> How are the ratings and reviews distributed with respect to authors work?</b><br/>\r\n\r\nThe plot shown below describes various features of a record in a single graph.<br/>\r\nThe authors records are plotted as bubbles in the space of ratings count vs average rating.<br/>\r\nThe color of the bubble suggests the average number of pages in the books written by the author <br/>\r\nThe radius of the bubble corresponds to the number of books written by the author<br/>\r\n(To obtain a clear visualization, plot is done on a subset of the dataset with lies near the mean of the bell curve)\r\n<br/><br />\r\n<Iframe url=\"//plot.ly/~varshakr24/1.embed\"\r\n        width=\"100%\"\r\n        height=\"500px\" frameBorder=\"2\"\r\n        id=\"myId\" overflow =\"hidden\"\r\n        className=\"myClassname\"\r\n        display=\"initial\"\r\n        position=\"relative\"/>\r\n      </Card.Body>\r\n      </Card>\r\n<br/>\r\n<br/>\r\n<Card>\r\n      <Card.Header><h6>Features of Website</h6></Card.Header>\r\n      <Card.Body>\r\n\r\n<b>Author Space</b><br/>\r\nFor any author or a group of authors, the user can understand the features in terms of rating, reviews or count.\r\nWith the relative change in size or color and the grouping with respect to authors, users can understand the influence of authors.\r\n\r\n<br/><br/>\r\n\r\n<b>Genre Cluster</b><br/>\r\nThe user can analyze books grouped by 'genre'. \r\nIn any genre or group of genre the most rated books can be identified with interactive visualizations\r\n<br/>\r\n<br/>\r\n\r\n<b>Search Space</b><br/>\r\n\r\nGiven a particular year/ genre / author, the most trending feature in terms of rating, reviews or count will be visualized, to answer questions regarding the most liked book, the most read book, the most popular author etc.\r\nAny user can search for books in any particular shelf or 'tag'. Queries related to author, title, average rating, number of pages will be specified. Reviews, ratings are listed for each book. For each author, co-authors information, other books, average rating and interested genre will be made available. For each genre, trending authors and titles will be listed. Search based on user will also be made available.\r\n<br/>\r\n<br/>\r\n<b>User Network</b><br/>\r\n\r\nA network visualization of users with each user as vertex and number of common books as distance between vertices will be constructed. This answers questions about grouping of similar users, books existing in the group of similar users or books receiving common negative reviews.\r\n\r\n<br/>\r\n<br/>\r\n<b>Recommendation System</b><br/>\r\n\r\nAll reviews given by users for different books are available in ratings.csv. \r\nA similarity score can be calculated between the current user and the users with submitted reviews. \r\nOut of the pool of available books with similarity in users, \r\nrecommendations are made to any user selecting a book.\r\nThis is done using <b>Collaborative Filtering</b> technique.\r\n<br/>\r\n<br/>\r\n<b> Integration with external sources</b><br/>\r\n\r\nLinks to Goodreads website can be constructed using the bookID. \r\nIn any visualization, users can reach the goodreads site corresponsing to the book they are analyzing.\r\n\r\n\r\n      </Card.Body>\r\n      </Card>\r\n      </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Home;  ","\r\nimport React, { Component } from 'react';  \r\nimport tableau from 'tableau-api';  \r\n  \r\n  \r\nclass Viz1 extends Component {  \r\n  componentDidMount() {  \r\n    this.initViz()  \r\n  }  \r\n  \r\n  \r\n  initViz() {  \r\n    const vizUrl = 'https://public.tableau.com/views/Authorclustering/Sheet1?:display_count=y&publish=yes&:origin=viz_share_link';  \r\n    const vizContainer = this.vizContainer;  \r\n    let viz = new window.tableau.Viz(vizContainer, vizUrl)  \r\n  }  \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div style={{height:500, width:\"100%\"}} ref={(div) => { this.vizContainer = div }}>  \r\n      </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Viz1;  ","\r\nimport React, { Component } from 'react';   \r\nimport Viz1 from './Viz1'; \r\n  import Card from 'react-bootstrap/Card';\r\n\r\nclass Author extends Component {  \r\n  componentDidMount() {  \r\n     \r\n  }  \r\n  \r\n   \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div style={{position:'absolute',top:50,bottom:0,right:0,left:0, overflow:'auto', padding:20,\r\n      backgroundImage:'linear-gradient(to bottom right, #aa4b6b, #3b8d99)'}}> \r\n      <div style={{display: 'flex',  justifyContent:'space-between', alignItems:'top'}}>\r\n      <Card style={{width:'30%'}}>\r\n      <Card.Body>\r\n      The author space provides a consolidated view for authors and their works. \r\n      It also emphasizes the relative standing of book-author contrasted to other existing book-author information.\r\n      \r\n      The plot provides two levels of grouping: \r\n      <ol>\r\n      <li>Each 'tile' corresponds to a book.</li>\r\n      <li>Each 'grouped tile' corresponds to an author.</li>\r\n      </ol>\r\n      </Card.Body>\r\n      </Card>\r\n      <Card style={{width:'34%'}}>\r\n      <Card.Body>\r\n      There are two attributes associated with the tiles:<br/>\r\n      <ol>\r\n      <li>The color of a tile represents the average rating for a book.\r\n      The rating-color map is shown at the bottom right of the plot.</li>\r\n      <li>The size of a tile/grouped tile gives the number of ratings the item has received. \r\n      This is arranged in \r\n      the order of increasing grouped tile size which corresponds to the sum of all ratings for an author.</li>\r\n      </ol>\r\n      </Card.Body>\r\n      </Card>\r\n      <Card style={{width:'33%'}}>\r\n      <Card.Body>\r\n      The plot provides two kinds of filters:\r\n      <ol>\r\n      <li>From the plot: authors can be selected by selecting the tile. Multiple tiles (authors) can also be chosen. The visualization can be filtered to represent only for the chosen author/authors.</li>\r\n      <li>Filters on the right of the plot: The plot can be filtered for publication year, author or language.</li>\r\n\r\n      </ol>\r\n      </Card.Body>\r\n      </Card> \r\n      </div>\r\n      <br/>\r\n      <div>\r\n      <Card style={{width:'100%'}}>\r\n      \r\n      <Card.Header><h6>Questions</h6></Card.Header>\r\n      <Card.Body>\r\n      <ul>\r\n      <li>Trends:\r\n      <ul>\r\n      <li>Who are the most rated authors?</li>\r\n      <li>Who are the best rated authors?</li>\r\n      </ul>\r\n      </li>\r\n      <li>About single author:\r\n      <ul>\r\n      <li>How many books from the author?</li>\r\n      <li>What are the available books from the author?</li>\r\n      <li>Which are the most rated books?</li>\r\n      <li>Which are the best rated books?</li>\r\n      </ul>\r\n      </li>\r\n      <li>About multiple authors:\r\n      <ul>\r\n      <li>How can authors be compared in terms of mumber of books?</li>\r\n      <li>How can authors be compared in terms of most ratings?</li>\r\n      <li>How can authors be compared in terms of best ratings?</li>\r\n      </ul>\r\n      </li>\r\n      </ul>\r\n\r\n\r\n      </Card.Body>\r\n      </Card>\r\n      </div>\r\n      <br/>\r\n      <Card style={{width:'100%'}}>\r\n      <Card.Body>\r\n      <Viz1 />\r\n      </Card.Body>\r\n      </Card>\r\n      </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Author;  ","\r\nimport React, { Component } from 'react';  \r\nimport tableau from 'tableau-api';  \r\n  \r\n  \r\nclass Viz2 extends Component {  \r\n  componentDidMount() {  \r\n    this.initViz()  \r\n  }  \r\n  \r\n  \r\n  initViz() {  \r\n    const vizUrl = 'https://public.tableau.com/views/BooksGenre/Sheet2?:display_count=y&publish=yes&:origin=viz_share_link';  \r\n    const vizContainer = this.vizContainer;  \r\n    let viz = new window.tableau.Viz(vizContainer, vizUrl)  \r\n  }  \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div style={{height:500, width:\"100%\"}} ref={(div) => { this.vizContainer = div }}>  \r\n      </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Viz2;  ","\r\nimport React, { Component } from 'react';   \r\nimport Viz2 from './Viz2'; \r\nimport Card from 'react-bootstrap/Card';  \r\n\r\nclass Genre extends Component {  \r\n  componentDidMount() {  \r\n     \r\n  }  \r\n  \r\n   \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div style={{position:'absolute',top:50,bottom:0,right:0,left:0, overflow:'auto', padding:20,\r\n    backgroundImage:'linear-gradient(to bottom right, #aa4b6b, #3b8d99)'}}>  \r\n    <div style={{display: 'flex',  justifyContent:'space-between', alignItems:'top'}}>\r\n      <Card style={{width:'49.5%'}}>\r\n      <Card.Body>\r\n      \r\n    The Genre cluster is a view for books grouped by their genre. It also visualizes the relative influence of books in comparison from all genres of books or those in the selected genre(s). The plot has  two attributes associated: \r\n<ol>\r\n<li>The color of the circle gives the genre to which the belongs to.</li>\r\n<li>The size of the circle gives total ratings for the book.</li>\r\n</ol>\r\n      \r\n      </Card.Body>\r\n      </Card>\r\n      \r\n      <Card style={{width:'49.5%'}}>\r\n      <Card.Body>\r\n      On selecting genre(s) the books are filtered for chosen genre giving a different view.\r\n      It is a word cloud representing the most rated books categorized by genre(color).\r\n      For each book, tooltip gives all information along with the count for each 'star' rating.\r\n      Context menu gives a link to reach the GoodReads website\r\n      </Card.Body>\r\n      </Card> \r\n      </div>\r\n      <br/>\r\n      <Card>\r\n      <Card.Header><h6>Questions</h6></Card.Header>\r\n      <Card.Body>\r\n      <ul>\r\n      <li>Trends:\r\n      <ul>\r\n      <li>Which are the most rated Genres?</li>\r\n      <li>Which are the most available Genres?</li>\r\n      </ul>\r\n      </li>\r\n      <li>For a selected Genre/Genres:\r\n      <ul>\r\n      <li>Which are the most rated books?</li>\r\n      <li>To which Genre among selected, does the most rated books belong?</li>\r\n      <li>What are the individual properties of books like ratings?</li>\r\n      <li>Link to books?</li>\r\n      </ul>\r\n      </li>\r\n      </ul>\r\n      </Card.Body>\r\n      </Card>\r\n      <br/>\r\n      <Card>\r\n      <Card.Body>\r\n      <Viz2 />\r\n      </Card.Body>\r\n      </Card>\r\n      </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Genre;  ","\r\nimport React, { Component } from 'react';   \r\nimport Iframe from 'react-iframe'\r\nimport Card from 'react-bootstrap/Card';  \r\nclass Network extends Component {  \r\n  componentDidMount() {  \r\n     \r\n  }  \r\n  \r\n   \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div style={{position:'absolute',top:50,bottom:0,right:0,left:0, overflow:'auto', padding:20,\r\n    backgroundImage:'linear-gradient(to bottom right, #aa4b6b, #3b8d99)'}}>  \r\n    <Card>\r\n    <Card.Body>\r\n    The visualization is a network with users (described by user_id) as nodes and the similarity between them as edges. \r\n    The similarity (edge) between two users is the number of books common to both users. \r\n    More the number of common books, the greater the similarity and hence is represented by a thicker line. \r\n    The tooltip on a user gives the list of all books associated with the user.\r\nThe network is constructed for a subset of data to present a distinctive visualization.\r\n    </Card.Body>\r\n    </Card>\r\n    <br/>\r\n      <Card>\r\n      <Card.Header><h6>Questions</h6></Card.Header>\r\n      <Card.Body>\r\n      <ul>\r\n      <li>What is the number of commom books between each pair of users?</li>\r\n      <li>Which user has the most number of connections?</li>\r\n      <li>How frequently does books appear in common books list?</li>\r\n      <li>Which group of users have the most number of common books?</li>\r\n      </ul>\r\n\r\n\r\n      </Card.Body>\r\n      </Card>\r\n      <br/>\r\n      <Card>\r\n      <Card.Body>\r\n      <Iframe url=\"https://public.flourish.studio/visualisation/1050741/embed\"\r\n        width=\"100%\"\r\n        height=\"500px\"\r\n        id=\"myId\" overflow =\"hidden\"\r\n        className=\"myClassname\"\r\n        display=\"initial\"\r\n        position=\"relative\"/>\r\n        </Card.Body>\r\n        </Card>\r\n       </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Network;  ","\r\nimport React, { Component } from 'react';  \r\nimport tableau from 'tableau-api';  \r\n  \r\n  \r\nclass Viz4 extends Component {  \r\n  componentDidMount() {  \r\n    this.initViz()  \r\n  }  \r\n  \r\n  \r\n  initViz() {  \r\n    const vizUrl = 'https://public.tableau.com/views/Book1_15756186625570/Sheet1?:display_count=y&publish=yes&:origin=viz_share_link';  \r\n    const vizContainer = this.vizContainer;  \r\n    let viz = new window.tableau.Viz(vizContainer, vizUrl)  \r\n  }  \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div style={{height:500, width:\"100%\"}} ref={(div) => { this.vizContainer = div }}>  \r\n      </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Viz4;  ","\r\nimport React, { Component } from 'react';   \r\nimport Correlation from './Correlation.PNG';\r\nimport Collaborative_filtering from './Collaborative_filtering.gif';\r\n import Card from 'react-bootstrap/Card';\r\n import Viz4 from './Viz4.js';\r\n import Mat from './matrix.png';\r\n\r\n\r\nclass Recommendation extends Component {  \r\n  componentDidMount() {  \r\n     \r\n  }  \r\n  \r\n   \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div style={{position:'absolute',top:50,bottom:0,right:0,left:0, overflow:'auto', padding:15,\r\n    backgroundImage:'linear-gradient(to bottom right, #aa4b6b, #3b8d99)'}}>\r\n      \r\n      <Card>\r\n      <Card.Header> <h6>Recommendation System</h6></Card.Header>\r\n      <Card.Body>\r\n      Recommender systems are utilized in a variety of areas, \r\n      and are most commonly recognized as playlist generators for video and music services like Netflix, \r\n      YouTube and Spotify, product recommenders for services such as Amazon, or content recommenders for \r\n      social media platforms such as Facebook and Twitter\r\n      \r\n      <br/><br/>\r\n      Two common approaches to building Recommendation systems are:<br/>\r\n      <ul>\r\n      <li>Content Based Filtering</li>\r\n      <li>Collaborative filtering</li>\r\n      </ul>\r\n      Here, a recommender system is built for books using collaborative filtering using user-rating matrix for all books.\r\n      </Card.Body>\r\n      </Card>\r\n      <br />\r\n      \r\n      <Card>\r\n      <Card.Header> <h6>Content based filtering</h6></Card.Header>\r\n      <Card.Body>Content-based filtering methods are based on a description of the item and a profile of the user's preferences.\r\n      These methods are best suited to situations where there is known data or properties. \r\n      Content-based recommenders treat recommendation as a user-specific classification problem and learn a classifier \r\n      for the user's likes and dislikes based on product features.</Card.Body>\r\n      </Card>\r\n      <br />\r\n\r\n      <Card>\r\n      <Card.Header><h6> Collaborative filtering</h6></Card.Header>\r\n      <Card.Body><div ><img src={Collaborative_filtering} style={{width:250, height:250, float:'left'}}></img>\r\n       Collaborative filtering is a method of making automatic predictions (filtering) about the interests of a user \r\n       by collecting preferences or taste information from many users (collaborating). \r\n       The underlying assumption of the collaborative filtering approach is that if a person A \r\n       has the same opinion as a person B on an issue, \r\n       A is more likely to have B's opinion on a different issue than that of a randomly chosen person.\r\n       <br/><br/>\r\n       This image shows an example of predicting of the user's rating using collaborative filtering. \r\n       At first, people rate different items (like videos, images, games). \r\n       After that, the system is making predictions about user's rating for an item, \r\n       which the user hasn't rated yet. These predictions are built upon the existing ratings of other users, \r\n       who have similar ratings with the active user. \r\n       <br/>source: WikiPedia\r\n       <br/><br/>\r\n       For instance, in our case the system has made to make predictions based on the ratings given to books by different users.\r\n       <br />\r\n       \r\n      </div>\r\n\r\n      </Card.Body>\r\n      </Card>\r\n      <br />\r\n      \r\n      \r\n      <Card>\r\n      <Card.Header> <h6> Matrix factorization and Single Value Decomposition</h6></Card.Header>\r\n      <Card.Body> <div >\r\n      <img src={Mat} style={{width:600, height:250, float:'left' , margin:20, marginRight:40}}></img>\r\n      <br/>\r\n      Matrix factorization algorithms work by decomposing the user-item interaction matrix into the product of two lower dimensionality rectangular matrices.\r\n      <br/><br/>The image summarizes the core idea behind matrix factorization. \r\n      Let there be matrix A with dimensionality of (m,n) this matrix can be viewed as a dot product between \r\n      two matrix with each matrices having dimensions of (m,k) and (k,n).</div>\r\n      <br/><br/><br/><br/><br/><br/><br/>\r\n      <div>\r\n      <img src={Correlation} style={{width:750, height:350, float:'right', marginLeft:40}}></img>\r\n      Singluar Value Decomposition is one way way of doing matrix-factorization.\r\n      The number of features chosen for SVD is 10.\r\n      With this, A correlation matrix is computed for each pair of books as shown in the image.\r\n      <br/>\r\n      This is a matrix of size 10,000*10,000\r\n      <br/>\r\n      <br/>\r\n      Here, the correlation matrix is precomputed for use in the vizualization. \r\n      From the correlation matrix a list of pairwise correlations are extracted.\r\n      This list is filtered to include only those values above threshold which is 0.9.\r\n\r\n      </div>\r\n      </Card.Body>\r\n      </Card>\r\n     \t<br/>\r\n\r\n     \t<Card>\r\n      <Card.Header> <h6> Recommendation System </h6></Card.Header>\r\n      <Card.Body> <b>Usage Instructions:</b> <br/>\r\n\r\n     A user has to enter any book that he/she likes in the provided textbox.\r\n     The system calculates the correlation between the chosen book and all available books based on other users ratings.\r\n     The recommendations are such that the correlation is greater than 0.9.\r\n     The provided recommendations are ranked wrt correlation.\r\n     <br/>\r\n     <br/> Note: The chosen book text has to match the title exactly as in the database.\r\n  \r\n  \t<br/><br/>\r\n  \t<Viz4 /></Card.Body>\r\n      </Card>\r\n     \r\n      </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Recommendation;  ","\r\nimport React, { Component } from 'react';  \r\nimport tableau from 'tableau-api';  \r\n  \r\n  \r\nclass Viz3 extends Component {  \r\n  componentDidMount() {  \r\n    this.initViz()  \r\n  }  \r\n  \r\n  \r\n  initViz() {  \r\n    const vizUrl = 'https://public.tableau.com/views/Bestrating/Sheet1?:display_count=y&publish=yes&:origin=viz_share_link';  \r\n    const vizContainer = this.vizContainer;  \r\n    let viz = new window.tableau.Viz(vizContainer, vizUrl)  \r\n  }  \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div style={{height:500, width:\"100%\"}} ref={(div) => { this.vizContainer = div }}>  \r\n      </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Viz3;  ","\r\nimport React, { Component } from 'react';   \r\n import Viz3 from './Viz3';\r\n  import Card from 'react-bootstrap/Card'; \r\nclass Search extends Component {  \r\n  componentDidMount() {  \r\n     \r\n  }  \r\n  \r\n   \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div style={{position:'absolute',top:50,bottom:0,right:0,left:0, overflow:'auto', padding:20,\r\n    backgroundImage:'linear-gradient(to bottom right, #aa4b6b, #3b8d99)'}}>  \r\n      <Card>\r\n      <Card.Header><h6>Questions</h6></Card.Header>\r\n      <Card.Body>\r\n      <ul>\r\n      <li>Initial Table:\r\n      <ul>\r\n      <li>What are the best rated books?</li>\r\n      <li>What are the best rated books in a given year range?</li>\r\n      <li>What are the best rated books for a selected author or authors?</li>\r\n      <li>Search for a book with title</li>\r\n      </ul>\r\n      </li>\r\n      <li>Readers for selected book/books:\r\n      <ul>\r\n      <li>Who are the users reading the book?</li>\r\n      <li>Who are the users reading multiple selected books?</li>\r\n      </ul>\r\n      </li>\r\n      <li>Shelves for selected book/books:\r\n      <ul>\r\n      <li>To which shelf does the book/books belong?</li>\r\n      <li>How many times is any book placed in any particular shelf?</li>\r\n      <li>Most common shelves the book belongs to?</li>\r\n      </ul>\r\n      </li>\r\n      </ul>\r\n      </Card.Body>\r\n      </Card>\r\n      <br/>\r\n      <Card>\r\n      <Card.Body>\r\n      <Viz3 />\r\n      </Card.Body>\r\n      </Card>\r\n      </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Search;  ","\r\nimport React, { Component } from 'react';   \r\nimport Iframe from 'react-iframe'\r\nimport Card from 'react-bootstrap/Card'; \r\n\r\nclass Student extends Component {  \r\n  componentDidMount() {  \r\n     \r\n  }  \r\n  \r\n   \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div style={{position:'absolute',top:50,bottom:0,right:0,left:0, overflow:'auto', padding:20,\r\n    backgroundImage:'linear-gradient(to bottom right, #aa4b6b, #3b8d99)'}}>  \r\n      <Card>\r\n      <Card.Header>Student Info</Card.Header>\r\n      <Card.Body>\r\n      Name: Varsha Kuppur Rajendra <br/>\r\n      AndrewID: vkuppurr<br/>\r\n      EmailID: vkuppurr@andrew.cmu.edu\r\n      </Card.Body>\r\n      </Card>\r\n      <br/>\r\n      <Card>\r\n      <Card.Header>Website Info</Card.Header>\r\n      <Card.Body>\r\n      Framework used: ReactJS<br/>\r\n      Visualization platforms: Plotly, Tableau, Flourish<br/>\r\n      Website link: varshakr24.github.io/idsproject\r\n      </Card.Body>\r\n      </Card>\r\n      <br/>\r\n      <Card>\r\n      <Card.Header>Presentation</Card.Header>\r\n      <Card.Body>\r\n      <Iframe url=\"https://www.youtube.com/embed/ETlpVseS3hg\"\r\n        width=\"100%\"\r\n        height=\"500px\"\r\n        id=\"myId\" overflow =\"hidden\"\r\n        className=\"myClassname\"\r\n        display=\"initial\"\r\n        position=\"relative\"/>\r\n      </Card.Body>\r\n      </Card>\r\n       </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Student;  ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { AppBar } from '@material-ui/core';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport ToggleButton from 'react-bootstrap/ToggleButton'\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Button from 'react-bootstrap/Button'\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Home from './Home';\nimport Author from './Author';\nimport Genre from './Genre';\nimport Network from './Network';\nimport Recommendation from './Recommendation';\nimport Search from './Search';\nimport Student from './Student';\n\nclass App extends React.Component {\nconstructor(props) {\n\tsuper(props);\n    this.state = {selected: 'home'};\n}\nselecttab = (val) => {\n\tvar state = this.state;\n\tstate.selected = val;\n\tthis.setState(state);\n}\nrender() {\n\tconst {selected} = this.state;\n  return (\n  \t<div>\n    <div className=\"App\">\n      <AppBar position=\"static\">\n  \t<Toolbar variant=\"dense\" style={{height:50}}>\t\t\n    \n    <div >\n     \t <ButtonToolbar >\n    <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={selected} onChange={val => this.selecttab(val)}>\n      <ToggleButton value={'home'}>Home</ToggleButton>\n      <ToggleButton value={'author'}>Author Space</ToggleButton>\n      <ToggleButton value={'genre'}>Genre cluster</ToggleButton>\n      <ToggleButton value={'search'}>Search Space</ToggleButton>\n      <ToggleButton value={'network'}>User network</ToggleButton>\n      \n      <ToggleButton value={'recommendation'}>ML Prediction</ToggleButton>\n      <ToggleButton value={'student'} >About</ToggleButton>\n    </ToggleButtonGroup>\n    \n  </ButtonToolbar>\n      </div>\n  \t</Toolbar>\n\t</AppBar>\n\t  </div>\n\t  {selected=='home'? <Home />: null}\n\t  {selected=='author'? <Author />: null}\n\t  {selected=='search'? <Search />: null}\n\t  {selected=='genre'? <Genre />: null}\n\t  {selected=='network'? <Network />: null}\n\t  {selected=='recommendation'? <Recommendation />: null}\n    {selected=='student'? <Student />: null}\n\t  </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/distribution.76d48de6.png\";","module.exports = __webpack_public_path__ + \"static/media/Correlation.905122b7.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Collaborative_filtering.722d7195.gif\";","module.exports = __webpack_public_path__ + \"static/media/matrix.10a60666.png\";"],"sourceRoot":""}