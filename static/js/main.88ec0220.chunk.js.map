{"version":3,"sources":["logo.svg","Test.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Test","this","initViz","vizContainer","window","tableau","Viz","ref","div","Component","App","props","state","selected","className","position","variant","style","height","color","font","right","top","width","React","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,8NC2B5BC,G,mMApBXC,KAAKC,Y,gCAKL,IACMC,EAAeF,KAAKE,aAChB,IAAIC,OAAOC,QAAQC,IAAIH,EAFlB,gG,+BAMP,IAAD,OACP,OACE,yBAAKI,IAAK,SAACC,GAAU,EAAKL,aAAeK,S,GAf5BC,cC+CJC,E,YA1Cf,WAAYC,GAAQ,IAAD,8BAClB,4CAAMA,KACEC,MAAQ,CAACC,SAAU,QAFT,E,sEAKjB,OACC,6BACC,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAQC,SAAS,UACpB,kBAAC,IAAD,CAASC,QAAQ,QAAQC,MAAO,CAACC,OAAO,KACvC,kBAAC,IAAD,CAAYF,QAAQ,KAAKG,MAAM,UAAUF,MAAO,CAACG,KAAK,KAAtD,kBAGA,6BACE,kBAAC,IAAD,CAAQJ,QAAQ,YAAYG,MAAM,UAAUF,MAAO,CAACF,SAAS,WAAWM,MAAM,IAAKC,IAAI,EAAGC,MAAM,MAAhG,QAGA,kBAAC,IAAD,CAAQP,QAAQ,YAAYG,MAAM,UAAUF,MAAO,CAACF,SAAS,WAAWM,MAAM,IAAKC,IAAI,EAAGC,MAAM,MAAhG,gBAGA,kBAAC,IAAD,CAAQP,QAAQ,YAAYG,MAAM,UAAUF,MAAO,CAACF,SAAS,WAAWM,MAAM,IAAKC,IAAI,EAAGC,MAAM,MAAhG,kBAGA,kBAAC,IAAD,CAAQP,QAAQ,YAAYG,MAAM,UAAUF,MAAO,CAACF,SAAS,WAAWM,MAAM,IAAKC,IAAI,EAAGC,MAAM,MAAhG,gBAGA,kBAAC,IAAD,CAAQP,QAAQ,YAAYG,MAAM,UAAUF,MAAO,CAACF,SAAS,WAAWM,MAAM,IAAKC,IAAI,EAAGC,MAAM,MAAhG,gBAGA,kBAAC,IAAD,CAAQP,QAAQ,YAAYG,MAAM,UAAUF,MAAO,CAACF,SAAS,WAAWM,MAAM,EAAGC,IAAI,EAAGC,MAAM,MAA9F,sBAOFtB,KAAKW,MAAMC,SACZ,kBAAC,EAAD,CAAMI,MAAO,CAACC,OAAO,GAAIK,MAAM,W,GAtChBC,IAAMf,WCGJgB,QACW,cAA7BrB,OAAOsB,SAASC,UAEe,UAA7BvB,OAAOsB,SAASC,UAEhBvB,OAAOsB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.88ec0220.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\r\nimport React, { Component } from 'react';  \r\nimport tableau from 'tableau-api';  \r\n  \r\n  \r\nclass Test extends Component {  \r\n  componentDidMount() {  \r\n    this.initViz()  \r\n  }  \r\n  \r\n  \r\n  initViz() {  \r\n    const vizUrl = 'https://public.tableau.com/views/BooksGenre/Sheet2?:display_count=y&:origin=viz_share_link';  \r\n    const vizContainer = this.vizContainer;  \r\n    let viz = new window.tableau.Viz(vizContainer, vizUrl)  \r\n  }  \r\n  \r\n  \r\n  render() {  \r\n    return (  \r\n      <div ref={(div) => { this.vizContainer = div }}>  \r\n      </div>  \r\n    )  \r\n  }  \r\n}  \r\n  \r\n  \r\nexport default Test;  ","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { AppBar } from '@material-ui/core';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Test from './Test';\n\nclass App extends React.Component {\nconstructor(props) {\n\tsuper(props);\n    this.state = {selected: 'Home'};\n}\nrender() {\n  return (\n  \t<div>\n    <div className=\"App\">\n      <AppBar position=\"static\">\n  \t<Toolbar variant=\"dense\" style={{height:50}}>\t\t\n    <Typography variant=\"h1\" color=\"inherit\" style={{font:20}}>\n    \tWorld of Books\n    </Typography>\n    <div >\n      <Button variant=\"contained\" color=\"primary\" style={{position:'absolute',right:800, top:5, width:160}}>\n        Home\n      </Button>\n      <Button variant=\"contained\" color=\"primary\" style={{position:'absolute',right:640, top:5, width:160}}>\n        Author Space\n      </Button>\n      <Button variant=\"contained\" color=\"primary\" style={{position:'absolute',right:480, top:5, width:160}}>\n        Genre Clusters\n      </Button>\n      <Button variant=\"contained\" color=\"primary\" style={{position:'absolute',right:320, top:5, width:160}}>\n        Search Space\n      </Button>\n      <Button variant=\"contained\" color=\"primary\" style={{position:'absolute',right:160, top:5, width:160}}>\n        User Network\n      </Button>\n      <Button variant=\"contained\" color=\"primary\" style={{position:'absolute',right:0, top:5, width:160}}>\n        Recommendation\n      </Button>\n      </div>\n  \t</Toolbar>\n\t</AppBar>\n\t  </div>\n\t  {this.state.selected}\n\t  <Test style={{height:50, width:50}}/>\n\t  </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}